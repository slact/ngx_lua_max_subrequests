#!/bin/sh #good enough highlighting
#load_module "nginx-nchan/pkg/nginx-nchan-dev/etc/nginx/modules/ngx_nchan_module.so";
#user  nobody;
worker_processes      20;
working_directory     /tmp;

worker_rlimit_core    1024M;
worker_rlimit_nofile  100000;
#debug_points stop;

error_log             /dev/stderr;

pid                   /tmp/nchan-test-nginx.pid;
daemon                off;


events {
  worker_connections  50000;
  accept_mutex on;
}

http {
  access_log /dev/stdout;
#  access_log /dev/stdout;
  default_type  application/octet-stream;
  client_body_temp_path /tmp/ 1 2;
  sendfile        on;
  keepalive_timeout  65;
  client_max_body_size 100m;
  #client_body_in_file_only clean;
  #client_body_buffer_size 32K;
  
  #cachetag
  
  server {
    listen       8082;
    #listen      18010;
    #    root ./;
    
    
    location /up {
      rewrite_by_lua_block {
        local subs = require "ngx.max_subrequests"
        ngx.log(ngx.WARN, "max: "..subs.max().." active: "..subs.active() .. " main_active:"..subs.main_active().." remaining:" .. subs.remaining())
      }
      proxy_pass http://localhost:8082/up_delay_reply;
    }
    
    location /up_delay_reply {
      content_by_lua_block {
        ngx.sleep(0.3)
        ngx.say("okay then")
      }
    }
    
    location ~ /(\d+)$ {
      content_by_lua_block {
        
        local subs = require "ngx.max_subrequests"
        ngx.log(ngx.WARN, "max: "..subs.max().." active: "..subs.active() .. " remaining:" .. subs.remaining())
        
        local n = tonumber(ngx.var[1])
        local subs = {}
        for i=1,n do
          table.insert(subs,{"/1"})
        end
        local res = { ngx.location.capture_multi(subs) }
        for i,v in ipairs(res) do
          res[i] = v.body or "ERROR"
        end
        
        ngx.say(""..#res.." responses \n"..table.concat(res))
      }
    }
  }
}
